Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer {
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
}

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 MyPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	//Sample the pixel color from the texture
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	//Set the default output color to the ambient light value for all pixels
	color = ambientColor;

	//Initialize the specular color
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	lightDir = -lightDirection;

	lightIntensity = saturate(dot(input.normal, lightDir)); //saturate clamps the value in the range [0,1]

	if (lightIntensity > 0.0f) {
		//Determine the final diffuse color based on the diffuse color and the amount of light intensity
		color += (diffuseColor * lightIntensity);

		//Saturate the ambient and the diffuse color
		color = saturate(color);

		//Calculate the reflection vector
		reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		//Determine the amount of specular light based on the reflection vector, viewing direction and specular power
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

    color = color * textureColor;

	color = saturate(color + specular);

	return color;
}
